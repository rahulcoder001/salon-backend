generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(uuid())
  fullname    String
  email       String  @unique
  contact     String
  password    String
  profile_img String?
  salonId     String?
  step        Int?
  salon       Salon?  @relation(fields: [salonId], references: [id])
  staff       Staff[]
}

model Staff {
  id           String        @id @default(uuid())
  fullname     String
  email        String        @unique
  contact      String        @unique
  password     String
  profile_img  String?
  user_id      String
  branch_id    String
  staff_id     String        @unique
  appointments Appointment[]
  salaries     Salary[]
  attendances  Attendance[]
  clients      Client[]
  usedProducts UsedProduct[]
  feedbacks    Feedback[]

  user   User   @relation(fields: [user_id], references: [id])
  branch Branch @relation(fields: [branch_id], references: [id])
}

model Salon {
  id             String        @id @default(uuid())
  salon_name     String
  salon_tag      String
  opening_time   String?
  contact_email  String
  contact_number String
  branch_url     String?
  salon_img_url  String?
  appointments   Appointment[]
  clients        Client[]

  branches Branch[]
  users    User[]
}

model Branch {
  id              String        @id @default(uuid())
  branch_name     String
  branch_location String
  salon_id        String
  contact_email   String
  contact_number  String
  opning_time     String
  closeings_time  String
  appointments    Appointment[]
  usedProducts    UsedProduct[]
  feedbacks       Feedback[]

  salon     Salon       @relation(fields: [salon_id], references: [id])
  staff     Staff[]
  inventory Inventory[]
  service   Service[]
}

model Inventory {
  id               String @id @default(uuid())
  product_name     String
  product_quantity Int
  price            Int
  branch_id        String

  branch Branch @relation(fields: [branch_id], references: [id])
}

model Service {
  id            String        @id @default(uuid())
  service_name  String
  service_price Int
  time          Int
  branch_id     String
  appointments  Appointment[]

  branch Branch @relation(fields: [branch_id], references: [id])
}

model Client {
  id           String        @id @default(uuid())
  client_name  String
  email        String
  contact      String
  salon_id     String
  staff_id     String?
  appointments Appointment[]
  feedbacks    Feedback[]
  createdAt    DateTime      @default(now())

  salon Salon  @relation(fields: [salon_id], references: [id])
  staff Staff? @relation(fields: [staff_id], references: [id])
}

model Appointment {
  id           String        @id @default(uuid())
  salon_id     String
  branch_id    String
  staff_id     String
  service_id   String
  client_id    String
  date         String
  time         String
  status       String?       @default("pending")
  usedProducts UsedProduct[]

  salon   Salon   @relation(fields: [salon_id], references: [id])
  branch  Branch  @relation(fields: [branch_id], references: [id])
  staff   Staff   @relation(fields: [staff_id], references: [id])
  service Service @relation(fields: [service_id], references: [id])
  client  Client  @relation(fields: [client_id], references: [id])
}

model Salary {
  id       String   @id @default(uuid())
  staff_id String
  amount   Int
  date     DateTime @default(now())
  staff    Staff    @relation(fields: [staff_id], references: [id])
}

model Attendance {
  id         String   @id @default(uuid())
  staff_id   String
  date       DateTime @default(now())
  login_time String
  staff      Staff    @relation(fields: [staff_id], references: [id])
}

model UsedProduct {
  id             String   @id @default(uuid())
  branch_id      String
  product_name   String
  price          Int
  staff_id       String
  appointment_id String
  date           DateTime @default(now())

  branch      Branch      @relation(fields: [branch_id], references: [id])
  staff       Staff       @relation(fields: [staff_id], references: [id])
  appointment Appointment @relation(fields: [appointment_id], references: [id])
}

model Feedback {
  id        String   @id @default(uuid())
  client_id String
  branch_id String
  staff_id  String
  date      DateTime @default(now())
  rating    Int
  review    String
  feature   Boolean  @default(false)

  client Client @relation(fields: [client_id], references: [id])
  branch Branch @relation(fields: [branch_id], references: [id])
  staff  Staff  @relation(fields: [staff_id], references: [id])
}
